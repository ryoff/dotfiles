# #!/usr/bin/perl
snippet #!
	#!/usr/bin/perl
	
# Hash Pointer
snippet .
	 =>
# Function
snippet sub
	sub ${1:function_name} {
		${2:#body ...}
	}
# Conditional
snippet if
	if (${1}) {
		${2:# body...}
	}
# Conditional if..else
snippet ife
	if (${1}) {
		${2:# body...}
	} else {
		${3:# else...}
	}
# Conditional if..elsif..else
snippet ifee
	if (${1}) {
		${2:# body...}
	} elsif (${3}) {
		${4:# elsif...}
	} else {
		${5:# else...}
	}
# Conditional One-line
snippet xif
	${1:expression} if ${2:condition};${3}
# Unless conditional
snippet unless
	unless (${1}) {
		${2:# body...}
	}
# Unless conditional One-line
snippet xunless
	${1:expression} unless ${2:condition};${3}
# Try/Except
snippet eval
	eval {
		${1:# do something risky...}
	};
	if ($@) {
		${2:# handle failure...}
	}
# While Loop
snippet wh
	while (${1}) {
		${2:# body...}
	}
# While Loop One-line
snippet xwh
	${1:expression} while ${2:condition};${3}
# For Loop
snippet for
	for (my $${2:var} = 0; $$2 < ${1:count}; $$2${3:++}) {
		${4:# body...}
	}
# Foreach Loop
snippet fore
	foreach my $${1:x} (@${2:array}) {
		${3:# body...}
	}
# Foreach Loop One-line
snippet xfore
	${1:expression} foreach @${2:array};${3}
# Package
snippet cl
	package ${1:ClassName};
	
	use base qw(${2:ParentClass});
	
	sub new {
		my $class = shift;
		$class = ref $class if ref $class;
		my $self = bless {}, $class;
		$self;
	}
	
	1;${3}
# Read File
snippet slurp
	my $${1:var};
	{ local $/ = undef; local *FILE; open FILE, "<${2:file}"; $$1 = <FILE>; close FILE }${3}
#perl
snippet dump
	use Data::Dumper; warn Dumper ${1:$var};
	${2}
snippet say
	print ${1:$var}, "\n";
	${2}
snippet self
	my $self = shift;
	${2}
snippet data
	my $data = do {
		local $/;
		<data>
	};
	${1}
snippet argf
	while (<>) {
		chomp;
		${1}
	}
	${2}
snippet isa
	if (blessed ${1:$var} and ${2:$var}->isa('${3:Class}')) {
		${4}
	}
	${5}
snippet readcsv
	use IO::File;
	use Text::CSV_XS;
	
	my $fh = IO::File->new('${1:filename}') or die 'cannot open file.';
	my $csv = Text::CSV_XS->new({ sep_char => "\t", binary => 1 });
	until ($fh->eof) {
		my $cols = $csv->getline($fh);
		unless ($cols) {
			warn $csv->error_diag;
			next;
		}
		my (${2}) = @$cols;
	}
	$fh->close;
	${3}

#class-C3
snippet next
	$self->next::method(@_);
	${1}
snippet maybe
	$self->maybe::next::method(@_);
	${1}

#Catalyst
snippet debug
	$c->log->debug('${1:[ debug ]}: '. ${2:$var});
	${3}
snippet warn
	$c->log->warn('${1:[ warn ]}: '. ${2:$var});
	${3}
snippet dumper
	$c->log->dumper('${1:[ dumper ]}: '. ${2:$var});
	${3}
snippet model
	$c->model('${1:model}')
	${2}
snippet view
	$c->view('${1:view}')
	${2}
snippet template
	$c->view('View::TT')->template('${1:name}');
	${2}
snippet config
	$c->config->{${1:name}}
	${2}
snippet controller
	sub ${1:func} : ${2:Attribute} {
		my ($self, $c) = @_;
		${3}
	}
	${4}
snippet begin
	sub begin : Private {
		my ($self, $c) = @_;
		${1}
		1;
	}
	${2}
snippet auto
	sub auto : Private {
		my ($self, $c) = @_;
		${1}
		1;
	}
	${2}
snippet detach
	$c->detach('${1:name}');
	${2}
snippet forward
	$c->forward('${1:name}');
	${2}
snippet stash
	$c->stash->{${1:var}}${2}
snippet flash
	$c->flash->{${1:var}}${2}
snippet session
	$c->session->{${1:var}}${2}
snippet sstash
	$c->stash->{${1:var}} = ${2};
	${3}
snippet sflash
	$c->flash->{${1:var}} = ${2};
	${3}
snippet ssession
	$c->session->{${1:var}} = ${2};
	${3}
snippet rs
	$c->model('DBIC::${1:Source}')
	${2}
snippet redirect
	$c->res->redirect($c->uri_for('${1:uri}'));
	${2}
snippet param
	$c->req->param('${1:param}')
	${2}
